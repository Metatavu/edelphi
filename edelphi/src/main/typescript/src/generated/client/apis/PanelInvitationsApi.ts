/* tslint:disable */
/* eslint-disable */
/**
 * eDelphi REST API
 * REST API for eDelphi
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PanelInvitation,
    PanelInvitationFromJSON,
    PanelInvitationToJSON,
    PanelInvitationRequest,
    PanelInvitationRequestFromJSON,
    PanelInvitationRequestToJSON,
    PanelInvitationState,
    PanelInvitationStateFromJSON,
    PanelInvitationStateToJSON,
} from '../models';

export interface CreatePanelInvitationRequestRequest {
    panelInvitationRequest: PanelInvitationRequest;
    panelId: number;
}

export interface ListPanelInvitationsRequest {
    panelId: number;
    state: PanelInvitationState;
    firstResult?: number;
    maxResults?: number;
}

/**
 * 
 */
export class PanelInvitationsApi extends runtime.BaseAPI {

    /**
     * Creates a panel invitation request
     * Creates a panel invitation request
     */
    async createPanelInvitationRequestRaw(requestParameters: CreatePanelInvitationRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.panelInvitationRequest === null || requestParameters.panelInvitationRequest === undefined) {
            throw new runtime.RequiredError('panelInvitationRequest','Required parameter requestParameters.panelInvitationRequest was null or undefined when calling createPanelInvitationRequest.');
        }

        if (requestParameters.panelId === null || requestParameters.panelId === undefined) {
            throw new runtime.RequiredError('panelId','Required parameter requestParameters.panelId was null or undefined when calling createPanelInvitationRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/panels/{panelId}/invitationRequests`.replace(`{${"panelId"}}`, encodeURIComponent(String(requestParameters.panelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PanelInvitationRequestToJSON(requestParameters.panelInvitationRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a panel invitation request
     * Creates a panel invitation request
     */
    async createPanelInvitationRequest(requestParameters: CreatePanelInvitationRequestRequest): Promise<void> {
        await this.createPanelInvitationRequestRaw(requestParameters);
    }

    /**
     * List panel invitations
     * List panel invitations
     */
    async listPanelInvitationsRaw(requestParameters: ListPanelInvitationsRequest): Promise<runtime.ApiResponse<Array<PanelInvitation>>> {
        if (requestParameters.panelId === null || requestParameters.panelId === undefined) {
            throw new runtime.RequiredError('panelId','Required parameter requestParameters.panelId was null or undefined when calling listPanelInvitations.');
        }

        if (requestParameters.state === null || requestParameters.state === undefined) {
            throw new runtime.RequiredError('state','Required parameter requestParameters.state was null or undefined when calling listPanelInvitations.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.firstResult !== undefined) {
            queryParameters['firstResult'] = requestParameters.firstResult;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/panels/{panelId}/invitations`.replace(`{${"panelId"}}`, encodeURIComponent(String(requestParameters.panelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PanelInvitationFromJSON));
    }

    /**
     * List panel invitations
     * List panel invitations
     */
    async listPanelInvitations(requestParameters: ListPanelInvitationsRequest): Promise<Array<PanelInvitation>> {
        const response = await this.listPanelInvitationsRaw(requestParameters);
        return await response.value();
    }

}
