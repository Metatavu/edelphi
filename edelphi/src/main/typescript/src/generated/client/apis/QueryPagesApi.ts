/* tslint:disable */
/* eslint-disable */
/**
 * eDelphi REST API
 * REST API for eDelphi
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    QueryPage,
    QueryPageFromJSON,
    QueryPageToJSON,
} from '../models';

export interface FindQueryPageRequest {
    panelId: number;
    queryPageId: number;
}

export interface ListQueryPagesRequest {
    panelId: number;
    queryId?: number;
    includeHidden?: boolean;
}

export interface UpdateQueryPageRequest {
    queryPage: QueryPage;
    panelId: number;
    queryPageId: number;
}

/**
 * 
 */
export class QueryPagesApi extends runtime.BaseAPI {

    /**
     * Finds query page by id
     * Find query page.
     */
    async findQueryPageRaw(requestParameters: FindQueryPageRequest): Promise<runtime.ApiResponse<QueryPage>> {
        if (requestParameters.panelId === null || requestParameters.panelId === undefined) {
            throw new runtime.RequiredError('panelId','Required parameter requestParameters.panelId was null or undefined when calling findQueryPage.');
        }

        if (requestParameters.queryPageId === null || requestParameters.queryPageId === undefined) {
            throw new runtime.RequiredError('queryPageId','Required parameter requestParameters.queryPageId was null or undefined when calling findQueryPage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/panels/{panelId}/queryPages/{queryPageId}`.replace(`{${"panelId"}}`, encodeURIComponent(String(requestParameters.panelId))).replace(`{${"queryPageId"}}`, encodeURIComponent(String(requestParameters.queryPageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryPageFromJSON(jsonValue));
    }

    /**
     * Finds query page by id
     * Find query page.
     */
    async findQueryPage(requestParameters: FindQueryPageRequest): Promise<QueryPage> {
        const response = await this.findQueryPageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists query pages
     * Lists query pages.
     */
    async listQueryPagesRaw(requestParameters: ListQueryPagesRequest): Promise<runtime.ApiResponse<Array<QueryPage>>> {
        if (requestParameters.panelId === null || requestParameters.panelId === undefined) {
            throw new runtime.RequiredError('panelId','Required parameter requestParameters.panelId was null or undefined when calling listQueryPages.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.queryId !== undefined) {
            queryParameters['queryId'] = requestParameters.queryId;
        }

        if (requestParameters.includeHidden !== undefined) {
            queryParameters['includeHidden'] = requestParameters.includeHidden;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/panels/{panelId}/queryPages`.replace(`{${"panelId"}}`, encodeURIComponent(String(requestParameters.panelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QueryPageFromJSON));
    }

    /**
     * Lists query pages
     * Lists query pages.
     */
    async listQueryPages(requestParameters: ListQueryPagesRequest): Promise<Array<QueryPage>> {
        const response = await this.listQueryPagesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates query page
     * Update query page
     */
    async updateQueryPageRaw(requestParameters: UpdateQueryPageRequest): Promise<runtime.ApiResponse<QueryPage>> {
        if (requestParameters.queryPage === null || requestParameters.queryPage === undefined) {
            throw new runtime.RequiredError('queryPage','Required parameter requestParameters.queryPage was null or undefined when calling updateQueryPage.');
        }

        if (requestParameters.panelId === null || requestParameters.panelId === undefined) {
            throw new runtime.RequiredError('panelId','Required parameter requestParameters.panelId was null or undefined when calling updateQueryPage.');
        }

        if (requestParameters.queryPageId === null || requestParameters.queryPageId === undefined) {
            throw new runtime.RequiredError('queryPageId','Required parameter requestParameters.queryPageId was null or undefined when calling updateQueryPage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/panels/{panelId}/queryPages/{queryPageId}`.replace(`{${"panelId"}}`, encodeURIComponent(String(requestParameters.panelId))).replace(`{${"queryPageId"}}`, encodeURIComponent(String(requestParameters.queryPageId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: QueryPageToJSON(requestParameters.queryPage),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryPageFromJSON(jsonValue));
    }

    /**
     * Updates query page
     * Update query page
     */
    async updateQueryPage(requestParameters: UpdateQueryPageRequest): Promise<QueryPage> {
        const response = await this.updateQueryPageRaw(requestParameters);
        return await response.value();
    }

}
