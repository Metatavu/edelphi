/* tslint:disable */
/* eslint-disable */
/**
 * eDelphi REST API
 * REST API for eDelphi
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    QueryQuestionComment,
    QueryQuestionCommentFromJSON,
    QueryQuestionCommentToJSON,
} from '../models';

export interface CreateQueryQuestionCommentRequest {
    queryQuestionComment: QueryQuestionComment;
    panelId: number;
}

export interface DeleteQueryQuestionCommentRequest {
    panelId: number;
    commentId: number;
}

export interface FindQueryQuestionCommentRequest {
    panelId: number;
    commentId: number;
}

export interface ListQueryQuestionCommentsRequest {
    panelId: number;
    queryId?: number;
    pageId?: number;
    userId?: string;
    stampId?: number;
    parentId?: number;
    categoryId?: number;
}

export interface UpdateQueryQuestionCommentRequest {
    queryQuestionComment: QueryQuestionComment;
    panelId: number;
    commentId: number;
}

/**
 * 
 */
export class QueryQuestionCommentsApi extends runtime.BaseAPI {

    /**
     * Creates query question comment
     * Create query question comment
     */
    async createQueryQuestionCommentRaw(requestParameters: CreateQueryQuestionCommentRequest): Promise<runtime.ApiResponse<QueryQuestionComment>> {
        if (requestParameters.queryQuestionComment === null || requestParameters.queryQuestionComment === undefined) {
            throw new runtime.RequiredError('queryQuestionComment','Required parameter requestParameters.queryQuestionComment was null or undefined when calling createQueryQuestionComment.');
        }

        if (requestParameters.panelId === null || requestParameters.panelId === undefined) {
            throw new runtime.RequiredError('panelId','Required parameter requestParameters.panelId was null or undefined when calling createQueryQuestionComment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/panels/{panelId}/queryQuestionComments`.replace(`{${"panelId"}}`, encodeURIComponent(String(requestParameters.panelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryQuestionCommentToJSON(requestParameters.queryQuestionComment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryQuestionCommentFromJSON(jsonValue));
    }

    /**
     * Creates query question comment
     * Create query question comment
     */
    async createQueryQuestionComment(requestParameters: CreateQueryQuestionCommentRequest): Promise<QueryQuestionComment> {
        const response = await this.createQueryQuestionCommentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes query question comment
     * Delete query question comment
     */
    async deleteQueryQuestionCommentRaw(requestParameters: DeleteQueryQuestionCommentRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.panelId === null || requestParameters.panelId === undefined) {
            throw new runtime.RequiredError('panelId','Required parameter requestParameters.panelId was null or undefined when calling deleteQueryQuestionComment.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling deleteQueryQuestionComment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/panels/{panelId}/queryQuestionComments/{commentId}`.replace(`{${"panelId"}}`, encodeURIComponent(String(requestParameters.panelId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes query question comment
     * Delete query question comment
     */
    async deleteQueryQuestionComment(requestParameters: DeleteQueryQuestionCommentRequest): Promise<void> {
        await this.deleteQueryQuestionCommentRaw(requestParameters);
    }

    /**
     * Finds query question comment by id
     * Find query question comment
     */
    async findQueryQuestionCommentRaw(requestParameters: FindQueryQuestionCommentRequest): Promise<runtime.ApiResponse<QueryQuestionComment>> {
        if (requestParameters.panelId === null || requestParameters.panelId === undefined) {
            throw new runtime.RequiredError('panelId','Required parameter requestParameters.panelId was null or undefined when calling findQueryQuestionComment.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling findQueryQuestionComment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/panels/{panelId}/queryQuestionComments/{commentId}`.replace(`{${"panelId"}}`, encodeURIComponent(String(requestParameters.panelId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryQuestionCommentFromJSON(jsonValue));
    }

    /**
     * Finds query question comment by id
     * Find query question comment
     */
    async findQueryQuestionComment(requestParameters: FindQueryQuestionCommentRequest): Promise<QueryQuestionComment> {
        const response = await this.findQueryQuestionCommentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists query question comments
     * Lists query question comments
     */
    async listQueryQuestionCommentsRaw(requestParameters: ListQueryQuestionCommentsRequest): Promise<runtime.ApiResponse<Array<QueryQuestionComment>>> {
        if (requestParameters.panelId === null || requestParameters.panelId === undefined) {
            throw new runtime.RequiredError('panelId','Required parameter requestParameters.panelId was null or undefined when calling listQueryQuestionComments.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.queryId !== undefined) {
            queryParameters['queryId'] = requestParameters.queryId;
        }

        if (requestParameters.pageId !== undefined) {
            queryParameters['pageId'] = requestParameters.pageId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.stampId !== undefined) {
            queryParameters['stampId'] = requestParameters.stampId;
        }

        if (requestParameters.parentId !== undefined) {
            queryParameters['parentId'] = requestParameters.parentId;
        }

        if (requestParameters.categoryId !== undefined) {
            queryParameters['categoryId'] = requestParameters.categoryId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/panels/{panelId}/queryQuestionComments`.replace(`{${"panelId"}}`, encodeURIComponent(String(requestParameters.panelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QueryQuestionCommentFromJSON));
    }

    /**
     * Lists query question comments
     * Lists query question comments
     */
    async listQueryQuestionComments(requestParameters: ListQueryQuestionCommentsRequest): Promise<Array<QueryQuestionComment>> {
        const response = await this.listQueryQuestionCommentsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates query question comment
     * Update query question comment
     */
    async updateQueryQuestionCommentRaw(requestParameters: UpdateQueryQuestionCommentRequest): Promise<runtime.ApiResponse<QueryQuestionComment>> {
        if (requestParameters.queryQuestionComment === null || requestParameters.queryQuestionComment === undefined) {
            throw new runtime.RequiredError('queryQuestionComment','Required parameter requestParameters.queryQuestionComment was null or undefined when calling updateQueryQuestionComment.');
        }

        if (requestParameters.panelId === null || requestParameters.panelId === undefined) {
            throw new runtime.RequiredError('panelId','Required parameter requestParameters.panelId was null or undefined when calling updateQueryQuestionComment.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling updateQueryQuestionComment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/panels/{panelId}/queryQuestionComments/{commentId}`.replace(`{${"panelId"}}`, encodeURIComponent(String(requestParameters.panelId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: QueryQuestionCommentToJSON(requestParameters.queryQuestionComment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryQuestionCommentFromJSON(jsonValue));
    }

    /**
     * Updates query question comment
     * Update query question comment
     */
    async updateQueryQuestionComment(requestParameters: UpdateQueryQuestionCommentRequest): Promise<QueryQuestionComment> {
        const response = await this.updateQueryQuestionCommentRaw(requestParameters);
        return await response.value();
    }

}
