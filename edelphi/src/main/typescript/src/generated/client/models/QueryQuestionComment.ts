/* tslint:disable */
/* eslint-disable */
/**
 * eDelphi REST API
 * REST API for eDelphi
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface QueryQuestionComment
 */
export interface QueryQuestionComment {
    /**
     * Comment's id
     * @type {number}
     * @memberof QueryQuestionComment
     */
    readonly id?: number;
    /**
     * Comment's category id
     * @type {number}
     * @memberof QueryQuestionComment
     */
    categoryId?: number;
    /**
     * Parent comment's id
     * @type {number}
     * @memberof QueryQuestionComment
     */
    parentId?: number;
    /**
     * Whether the comment has been hided by the manager
     * @type {boolean}
     * @memberof QueryQuestionComment
     */
    hidden?: boolean;
    /**
     * Page's id where the comment is
     * @type {number}
     * @memberof QueryQuestionComment
     */
    queryPageId: number;
    /**
     * Comment's query reply id
     * @type {number}
     * @memberof QueryQuestionComment
     */
    queryReplyId: number;
    /**
     * Comment's contents
     * @type {string}
     * @memberof QueryQuestionComment
     */
    contents?: string;
    /**
     * Comment's creator id
     * @type {string}
     * @memberof QueryQuestionComment
     */
    readonly creatorId?: string;
    /**
     * Comment's last modifier id
     * @type {string}
     * @memberof QueryQuestionComment
     */
    readonly lastModifierId?: string;
    /**
     * Comment's creation time
     * @type {Date}
     * @memberof QueryQuestionComment
     */
    readonly created?: Date;
    /**
     * Comment's last modification time
     * @type {Date}
     * @memberof QueryQuestionComment
     */
    readonly lastModified?: Date;
}

export function QueryQuestionCommentFromJSON(json: any): QueryQuestionComment {
    return QueryQuestionCommentFromJSONTyped(json, false);
}

export function QueryQuestionCommentFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryQuestionComment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'categoryId': !exists(json, 'categoryId') ? undefined : json['categoryId'],
        'parentId': !exists(json, 'parentId') ? undefined : json['parentId'],
        'hidden': !exists(json, 'hidden') ? undefined : json['hidden'],
        'queryPageId': json['queryPageId'],
        'queryReplyId': json['queryReplyId'],
        'contents': !exists(json, 'contents') ? undefined : json['contents'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'lastModified': !exists(json, 'lastModified') ? undefined : (new Date(json['lastModified'])),
    };
}

export function QueryQuestionCommentToJSON(value?: QueryQuestionComment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'categoryId': value.categoryId,
        'parentId': value.parentId,
        'hidden': value.hidden,
        'queryPageId': value.queryPageId,
        'queryReplyId': value.queryReplyId,
        'contents': value.contents,
    };
}


