/* tslint:disable */
/* eslint-disable */
/**
 * eDelphi REST API
 * REST API for eDelphi
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    QueryPageCommentOptions,
    QueryPageCommentOptionsFromJSON,
    QueryPageCommentOptionsFromJSONTyped,
    QueryPageCommentOptionsToJSON,
    QueryPageLive2DOptions,
    QueryPageLive2DOptionsFromJSON,
    QueryPageLive2DOptionsFromJSONTyped,
    QueryPageLive2DOptionsToJSON,
    QueryPageType,
    QueryPageTypeFromJSON,
    QueryPageTypeFromJSONTyped,
    QueryPageTypeToJSON,
} from './';

/**
 * 
 * @export
 * @interface QueryPage
 */
export interface QueryPage {
    /**
     * 
     * @type {number}
     * @memberof QueryPage
     */
    readonly id?: number;
    /**
     * 
     * @type {number}
     * @memberof QueryPage
     */
    pageNumber: number;
    /**
     * 
     * @type {string}
     * @memberof QueryPage
     */
    title: string;
    /**
     * 
     * @type {QueryPageType}
     * @memberof QueryPage
     */
    type: QueryPageType;
    /**
     * 
     * @type {QueryPageCommentOptions}
     * @memberof QueryPage
     */
    commentOptions: QueryPageCommentOptions;
    /**
     * 
     * @type {QueryPageLive2DOptions}
     * @memberof QueryPage
     */
    queryOptions: QueryPageLive2DOptions;
}

export function QueryPageFromJSON(json: any): QueryPage {
    return QueryPageFromJSONTyped(json, false);
}

export function QueryPageFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryPage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'pageNumber': json['pageNumber'],
        'title': json['title'],
        'type': QueryPageTypeFromJSON(json['type']),
        'commentOptions': QueryPageCommentOptionsFromJSON(json['commentOptions']),
        'queryOptions': QueryPageLive2DOptionsFromJSON(json['queryOptions']),
    };
}

export function QueryPageToJSON(value?: QueryPage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'pageNumber': value.pageNumber,
        'title': value.title,
        'type': QueryPageTypeToJSON(value.type),
        'commentOptions': QueryPageCommentOptionsToJSON(value.commentOptions),
        'queryOptions': QueryPageLive2DOptionsToJSON(value.queryOptions),
    };
}


