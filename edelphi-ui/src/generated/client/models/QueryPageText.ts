// tslint:disable
// eslint-disable
/**
 * eDelphi REST API
 * REST API for eDelphi
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    QueryPage,
    QueryPageFromJSON,
    QueryPageFromJSONTyped,
    QueryPageToJSON,
    QueryPageCommentOptions,
    QueryPageCommentOptionsFromJSON,
    QueryPageCommentOptionsFromJSONTyped,
    QueryPageCommentOptionsToJSON,
    QueryPageTextAllOf,
    QueryPageTextAllOfFromJSON,
    QueryPageTextAllOfFromJSONTyped,
    QueryPageTextAllOfToJSON,
    QueryPageType,
    QueryPageTypeFromJSON,
    QueryPageTypeFromJSONTyped,
    QueryPageTypeToJSON,
} from './';

/**
 * 
 * @export
 * @interface QueryPageText
 */
export interface QueryPageText {
    /**
     * 
     * @type {number}
     * @memberof QueryPageText
     */
    readonly id?: number;
    /**
     * 
     * @type {number}
     * @memberof QueryPageText
     */
    page_number: number;
    /**
     * 
     * @type {string}
     * @memberof QueryPageText
     */
    title: string;
    /**
     * 
     * @type {QueryPageType}
     * @memberof QueryPageText
     */
    type: QueryPageType;
    /**
     * 
     * @type {QueryPageCommentOptions}
     * @memberof QueryPageText
     */
    comment_options: QueryPageCommentOptions;
    /**
     * 
     * @type {string}
     * @memberof QueryPageText
     */
    content?: string;
}

export function QueryPageTextFromJSON(json: any): QueryPageText {
    return QueryPageTextFromJSONTyped(json, false);
}

export function QueryPageTextFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryPageText {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'page_number': json['pageNumber'],
        'title': json['title'],
        'type': QueryPageTypeFromJSON(json['type']),
        'comment_options': QueryPageCommentOptionsFromJSON(json['commentOptions']),
        'content': !exists(json, 'content') ? undefined : json['content'],
    };
}

export function QueryPageTextToJSON(value?: QueryPageText | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'pageNumber': value.page_number,
        'title': value.title,
        'type': QueryPageTypeToJSON(value.type),
        'commentOptions': QueryPageCommentOptionsToJSON(value.comment_options),
        'content': value.content,
    };
}


