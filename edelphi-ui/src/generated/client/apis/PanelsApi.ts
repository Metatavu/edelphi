// tslint:disable
// eslint-disable
/**
 * eDelphi REST API
 * REST API for eDelphi
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Panel,
    PanelFromJSON,
    PanelToJSON,
} from '../models';

export interface FindPanelRequest {
    panelId: number;
}

/**
 * no description
 */
export class PanelsApi extends runtime.BaseAPI {

    /**
     * Finds a panel by id
     * Find a panel.
     */
    async findPanelRaw(requestParameters: FindPanelRequest): Promise<runtime.ApiResponse<Panel>> {
        if (requestParameters.panelId === null || requestParameters.panelId === undefined) {
            throw new runtime.RequiredError('panelId','Required parameter requestParameters.panelId was null or undefined when calling findPanel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/panels/{panelId}`.replace(`{${"panelId"}}`, encodeURIComponent(String(requestParameters.panelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PanelFromJSON(jsonValue));
    }

    /**
     * Finds a panel by id
     * Find a panel.
     */
    async findPanel(requestParameters: FindPanelRequest): Promise<Panel> {
        const response = await this.findPanelRaw(requestParameters);
        return await response.value();
    }

}
